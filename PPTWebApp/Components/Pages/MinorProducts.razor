@page "/products"
@using PPTWebApp.Data.Models
@using PPTWebApp.Data.Services
@inject ProductService ProductService
@inject ProductCategoryService ProductCategoryService
@rendermode InteractiveServer

@code {
    private string searchInput = "";
    private List<Product> Products = new List<Product>();
    private List<ProductCategory> ProductCategories = new List<ProductCategory>();
    private List<string> SortByOptions = new List<string>
    {
        "Best Sellers",
        "Cheapest First",
        "Most Expensive First",
    };
    private string SortBy = "Best Sellers";
    private ProductCategory? SelectedCategory = null;
    private decimal minPrice = 0;
    private decimal maxPrice = 1000;
    private int maxProductsToDisplay = 8;
    private int pageIndex = 0;
    private int totalProducts = 0;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        ProductCategories = ProductCategoryService.GetAllCategories().ToList();

        totalProducts = ProductService.GetTotalProductCount(SelectedCategory, searchInput, minPrice, maxPrice);
        totalPages = (int)Math.Ceiling((double)totalProducts / maxProductsToDisplay);

        LoadProducts();
    }

    private void LoadProducts()
    {
        switch (SortBy)
        {
            case "Cheapest First":
                Products = ProductService.GetCheapestProducts(SelectedCategory, minPrice, maxPrice, pageIndex * maxProductsToDisplay, maxProductsToDisplay).ToList();
                break;
            case "Most Expensive First":
                Products = ProductService.GetMostExpensiveProducts(SelectedCategory, minPrice, maxPrice, pageIndex * maxProductsToDisplay, maxProductsToDisplay).ToList();
                break;
            case "Search Results":
                Products = ProductService.SearchProducts(SelectedCategory, searchInput, minPrice, maxPrice, pageIndex * maxProductsToDisplay, maxProductsToDisplay).ToList();
                break;
            default: // Best Sellers
                Products = ProductService.GetBestsellers(SelectedCategory, minPrice, maxPrice, pageIndex * maxProductsToDisplay, maxProductsToDisplay).ToList();
                break;
        }
    }

    private void LoadNextPage()
    {
        if (pageIndex < totalPages - 1)
        {
            pageIndex++;
            LoadProducts();
        }
    }

    private void LoadPreviousPage()
    {
        if (pageIndex > 0)
        {
            pageIndex--;
            LoadProducts();
        }
    }

    private void OnPageInputChange(ChangeEventArgs e)
    {
        int inputPage = Math.Max(1, Math.Min(totalPages, int.Parse(e.Value.ToString())));
        pageIndex = inputPage - 1;
        LoadProducts();
    }

    private void OnCategoryChange(ChangeEventArgs e)
    {
        var selectedCategoryId = int.Parse(e.Value.ToString());
        SelectedCategory = ProductCategories.FirstOrDefault(c => c.Id == selectedCategoryId);
        pageIndex = 0;
        searchInput = "";
        LoadProducts();
    }

    private void OnMinPriceChange(ChangeEventArgs e)
    {
        minPrice = decimal.TryParse(e.Value.ToString(), out var result) ? result : 0;
        pageIndex = 0;
        LoadProducts();
    }

    private void OnMaxPriceChange(ChangeEventArgs e)
    {
        maxPrice = decimal.TryParse(e.Value.ToString(), out var result) ? result : 1000;
        pageIndex = 0;
        LoadProducts();
    }

    private void OnSortByChange(ChangeEventArgs e)
    {
        SortBy = e.Value.ToString();
        pageIndex = 0;
        LoadProducts();
    }

    private void OnSearchInputChange(ChangeEventArgs e)
    {
        searchInput = e.Value.ToString();
        SortBy = "Search Results";
        pageIndex = 0;
        LoadProducts();
    }

}

<div class="product-grid-container">
    <div class="query-bar-container">
        <button class="btn btn-dark d-lg-none mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#queryBar" aria-expanded="false" aria-controls="queryBar">
            Filters
        </button>

        <div id="queryBar" class="query-bar collapse d-lg-block">
            <div class="row gx-3">
                <div class="col-md-2 mb-2">
                    <input type="text" placeholder="Search products..." class="form-control"
                           @bind="searchInput" @oninput="OnSearchInputChange" />
                </div>

                <div class="col-md-2 mb-2">
                    <select class="form-select" @onchange="OnSortByChange">
                        @foreach (var option in SortByOptions)
                        {
                            <option value="@option" selected="@(option == SortBy)">@option</option>
                        }
                    </select>
                </div>

                <div class="col-md-3 mb-2 d-flex align-items-center">
                    <label for="priceRange" class="me-2">Price Range:</label>
                    <input type="number" id="minPriceInput" min="0" max="1000000" value="@minPrice" class="form-control w-25" @onchange="OnMinPriceChange" />
                    <span class="mx-2">to</span>
                    <input type="number" id="maxPriceInput" min="0" max="1000000" value="@maxPrice" class="form-control w-25" @onchange="OnMaxPriceChange" />
                </div>

                <div class="col-md-2 mb-2">
                    <select class="form-select" @onchange="OnCategoryChange">
                        <option value="0">All Categories</option>
                        @foreach (var category in ProductCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>

                <div class="col-md-2 mb-2">
                    <select class="form-select">
                        <option value="all">All Brands</option>
                        <option value="brand-a">Brand A</option>
                        <option value="brand-b">Brand B</option>
                        <option value="brand-c">Brand C</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <div class="row gx-3 gy-3 align-items-stretch">
        @foreach (var product in Products)
        {
            <div class="col-12 col-md-6 col-lg-3">
                <div class="product-box">
                    <ProductPreview Product="@product" />
                </div>
            </div>
        }
    </div>

    <div class="pagination">
        <button class="pagination-btn" @onclick="LoadPreviousPage">←</button>
        <input type="number" value="@(pageIndex + 1)" min="1" max="@totalPages" class="page-input" @onchange="OnPageInputChange" />
        of page: <span class="total-pages"> @totalPages</span>
        <button class="pagination-btn" @onclick="LoadNextPage">→</button>
    </div>
</div>
