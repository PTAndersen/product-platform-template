@using Microsoft.AspNetCore.Identity
@using PPTWebApp.Components.Layout
@using PPTWebApp.Data
@using PPTWebApp.Data.Models
@using PPTWebApp.Data.Services
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject VisitorSessionService VisitorSessionService
@inject OrderService OrderService
@inject ProductService ProductService
@inject ApplicationUserService ApplicationUserService
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="dashboard-scroll-container">
    <h1>Admin Panel</h1>

    @if (isAdmin)
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Daily Visitors</h5>
                            <canvas id="dailyVisitorsChart"></canvas>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Sales Overview</h5>
                            <canvas id="salesOverviewChart"></canvas>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">User Registrations</h5>
                            <canvas id="userRegistrationsChart"></canvas>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Top Selling Products</h5>
                            <canvas id="topSellingProductsChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>You do not have access to this page.</p>
    }
</div>

@code {
    private bool isAdmin = false;
    private List<int> dailyVisitorsCounts = new List<int>();
    private List<decimal> dailySales = new List<decimal>();
    private List<int> dailyRegistrations = new List<int>();
    private List<(int Sales, Product Product)> topSellingProducts = new List<(int Sales, Product Product)>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
            {
                isAdmin = true;
            }
        }

        if (!isAdmin)
        {
            Navigation.NavigateTo("/");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isAdmin)
        {
            await LoadDailyVisitorsAsync();
            await LoadDailySalesAsync();
            await LoadDailyRegistrationsAsync();
            await LoadTopSellingProducts();
            await InitializeChartsAsync();
        }
    }



    private async Task LoadDailyVisitorsAsync()
    {
        dailyVisitorsCounts = await VisitorSessionService.GetDailyVisitorCountsAsync(7, CancellationToken.None);
    }

    private async Task LoadDailySalesAsync()
    {
        dailySales = await OrderService.GetDailySalesAsync(7, CancellationToken.None);
    }

    private async Task LoadDailyRegistrationsAsync()
    {
        dailyRegistrations = await ApplicationUserService.GetDailyUserRegistrationsAsync(7, CancellationToken.None);
    }

    private async Task LoadTopSellingProducts()
    {
        topSellingProducts = await ProductService.GetTopSellingProductsAsync(5, CancellationToken.None);
    }

    private async Task InitializeChartsAsync()
    {
        var dateLabels = Enumerable.Range(0, 7)
            .Select(i => DateTime.Now.AddDays(-i).ToString("ddd"))
            .Reverse()
            .ToArray();

        var dailyVisitorsChartData = new
        {
            labels = dateLabels,
            datasets = new[]
            {
                new {
                    label = "Visitors",
                    backgroundColor = "rgba(75, 192, 192, 0.2)",
                    borderColor = "rgba(75, 192, 192, 1)",
                    borderWidth = 1,
                    data = dailyVisitorsCounts.ToArray()
                }
            }
        };

        await JS.InvokeVoidAsync("createChart", "dailyVisitorsChart", "bar", dailyVisitorsChartData, GetDefaultOptions());

        var salesChartData = new
        {
            labels = dateLabels,
            datasets = new[]
            {
                new {
                    label = "Daily Sales",
                    backgroundColor = "rgba(255, 99, 132, 0.2)",
                    borderColor = "rgba(255, 99, 132, 1)",
                    borderWidth = 1,
                    data = dailySales.ToArray()
                }
            }
        };

        await JS.InvokeVoidAsync("createChart", "salesOverviewChart", "bar", salesChartData, GetDefaultOptions());

        var userRegistrationsChartData = new
        {
            labels = dateLabels,
            datasets = new[]
            {
                new {
                    label = "User Registrations",
                    backgroundColor = "rgba(255, 159, 64, 0.2)",
                    borderColor = "rgba(255, 159, 64, 1)",
                    borderWidth = 1,
                    data = dailyRegistrations.ToArray()
                }
            }
        };

        await JS.InvokeVoidAsync("createChart", "userRegistrationsChart", "bar", userRegistrationsChartData, GetDefaultOptions());

        var saleLabels = topSellingProducts.Select(p => p.Product.Name).ToArray();
        var salesData = topSellingProducts.Select(p => p.Sales).ToArray();

        var topSellingProductsChartData = new
        {
            labels = saleLabels,
            datasets = new[]
            {
                    new {
                        label = "Units Sold",
                        backgroundColor = "rgba(75, 192, 192, 0.2)",
                        borderColor = "rgba(75, 192, 192, 1)",
                        borderWidth = 1,
                        data = salesData
                    }
                }
        };

        await JS.InvokeVoidAsync("createChart", "topSellingProductsChart", "bar", topSellingProductsChartData, GetDefaultOptions());
    }

    private object GetDefaultOptions() => new
    {
        scales = new
        {
            yAxes = new[] {
            new {
                ticks = new {
                    beginAtZero = true
                }
            }
        }
        }
    };

}
