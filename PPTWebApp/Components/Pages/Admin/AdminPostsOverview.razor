@page "/admin/posts-overview"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PPTWebApp.Components.Layout
@using PPTWebApp.Data
@using PPTWebApp.Data.Models
@using PPTWebApp.Data.Services
@using System.Text.RegularExpressions
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PostService PostService
@rendermode InteractiveServer

<div class="posts-overview-scroll-container">
    <h1>Posts Overview</h1>

    @if (isAdmin)
    {
        <div class="admin-post-overview-container">
            <h1>Create New Post</h1>

            <EditForm Model="@postModel" OnValidSubmit="HandleValidSubmitAsync">
                <div class="form-group">
                    <label for="postTitle">Post Title</label>
                    <input id="postTitle" class="form-control" @bind="postModel.Title" placeholder="Enter post title" required />
                </div>

                <div class="form-group">
                    <label for="postAuthor">Author's Name</label>
                    <input id="postAuthor" class="form-control" @bind="postModel.Author" placeholder="Enter author's name" />
                </div>

                <div class="form-group">
                    <label for="postDate">Date</label>
                    <input id="postDate" class="form-control" type="date" @bind="postModel.DatePosted" />
                </div>

                <div class="form-group">
                    <label for="imageUrl">Image URL</label>
                    <input id="imageUrl" class="form-control" @bind="postModel.ImageUrl" placeholder="Enter image URL" required />
                </div>

                <div class="form-group">
                    <label for="postFile">Upload ZIP File (containing document exported as html and related folder with images)</label>
                    <InputFile OnChange="HandleZipSelectedAsync" class="form-control" accept=".zip" />
                </div>

                <button type="submit" class="btn btn-primary">Submit Post</button>
            </EditForm>
        </div>
    }
    else
    {
        <p>You do not have access to this page.</p>
    }
</div>

@code {
    private bool isAdmin = false;
    private Post postModel { get; set; } = new Post
        {
            Title = string.Empty,
            Content = string.Empty,
            ImageUrl = "https://via.placeholder.com/400x400",
            ImageCompromise = "vertical",
            Author = string.Empty,
            DatePosted = DateTime.Now
        };

    private IBrowserFile? zipFile;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
            {
                isAdmin = true;
            }
        }

        if (!isAdmin)
        {
            Navigation.NavigateTo("/");
        }

        InitializePostModel();
    }

    private void InitializePostModel()
    {
        postModel = new Post
            {
                Title = string.Empty,
                Content = string.Empty,
                ImageUrl = "https://via.placeholder.com/400x400", // TODO: make this an empty string for production
                ImageCompromise = "vertical",
                Author = string.Empty,
                DatePosted = DateTime.Now
            };
    }

    private void HandleZipSelectedAsync(InputFileChangeEventArgs e)
    {
        zipFile = e.File;
    }

    private async Task HandleValidSubmitAsync()
    {
        if (postModel == null)
        {
            Console.WriteLine("Post model is not initialized.");
            return;
        }

        try
        {
            if (zipFile == null)
            {
                Console.WriteLine("No ZIP file provided for the post.");
                return;
            }

            string htmlContent = await ExtractAndProcessZipAsync(zipFile);
            postModel.Content = htmlContent;
            postModel.DatePosted = postModel.DatePosted == DateTime.MinValue ? DateTime.Now : postModel.DatePosted;

            await PostService.AddPostAsync(postModel, CancellationToken.None);

            Console.WriteLine("Post successfully added.");
            Navigation.NavigateTo("/posts");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding post: {ex.Message}");
        }
    }

    private async Task<string> ExtractAndProcessZipAsync(IBrowserFile zipFile)
    {
        using var memoryStream = new MemoryStream();
        await zipFile.OpenReadStream().CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        using var archive = new System.IO.Compression.ZipArchive(memoryStream, System.IO.Compression.ZipArchiveMode.Read);

        string htmlContent = string.Empty;
        Dictionary<string, string> base64Images = new Dictionary<string, string>();

        foreach (var entry in archive.Entries)
        {
            if (entry.FullName.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) ||
                entry.FullName.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
                entry.FullName.EndsWith(".gif", StringComparison.OrdinalIgnoreCase))
            {
                using var imageStream = entry.Open();
                using var imageMemoryStream = new MemoryStream();
                await imageStream.CopyToAsync(imageMemoryStream);
                var base64String = Convert.ToBase64String(imageMemoryStream.ToArray());
                var mimeType = entry.FullName.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ? "image/png" :
                               entry.FullName.EndsWith(".gif", StringComparison.OrdinalIgnoreCase) ? "image/gif" : "image/jpeg";
                base64Images[entry.FullName] = $"data:{mimeType};base64,{base64String}";
            }
        }

        foreach (var entry in archive.Entries)
        {
            if (entry.FullName.EndsWith(".html", StringComparison.OrdinalIgnoreCase))
            {
                using var htmlStream = entry.Open();
                using var reader = new StreamReader(htmlStream);
                htmlContent = await reader.ReadToEndAsync();

                foreach (var imagePath in base64Images.Keys)
                {
                    var imageTag = $"src=\"{imagePath}\"";
                    var base64Data = base64Images[imagePath];
                    htmlContent = htmlContent.Replace(imageTag, $"src=\"{base64Data}\"");
                }
            }
        }

        return htmlContent;
    }
}
