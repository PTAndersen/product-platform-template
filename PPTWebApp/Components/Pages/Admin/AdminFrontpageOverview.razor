@page "/admin/frontpage-overview"
@using Microsoft.AspNetCore.Identity
@using PPTWebApp.Components.Layout
@using PPTWebApp.Data
@using PPTWebApp.Data.Models
@using PPTWebApp.Data.Services
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProductService ProductService
@inject HighlightService HighlightService
@rendermode InteractiveServer

<div class="frontpage-overview-scroll-container">
    <h1>Frontpage Overview</h1>

    @if (isAdmin)
    {
        <div class="frontpage-admin-container">
            <h1>Manage Frontpage Highlights</h1>

            <div class="highlight-section">
                <h3>Highlight 1</h3>
                <div class="form-group">
                    <label for="highlight1">Enter Product ID to Highlight:</label>
                    <input id="highlight1" type="text" class="form-control" @bind="highlight1Id" @bind:event="oninput" @onchange="() => OnHighlightIdChangedAsync(highlight1Id, 1)" />
                </div>
                <div class="highlight-preview">
                    <p><strong>Preview:</strong> @selectedHighlight1</p>
                    <p><strong>Status:</strong> @highlight1Status</p>
                </div>
            </div>

            <div class="highlight-section">
                <h3>Highlight 2</h3>
                <div class="form-group">
                    <label for="highlight2">Enter Product ID to Highlight:</label>
                    <input id="highlight2" type="text" class="form-control" @bind="highlight2Id" @bind:event="oninput" @onchange="() => OnHighlightIdChangedAsync(highlight2Id, 2)" />
                </div>
                <div class="highlight-preview">
                    <p><strong>Preview:</strong> @selectedHighlight2</p>
                    <p><strong>Status:</strong> @highlight2Status</p>
                </div>
            </div>

            <div class="highlight-section">
                <h3>Highlight 3</h3>
                <div class="form-group">
                    <label for="highlight3">Enter Product ID to Highlight:</label>
                    <input id="highlight3" type="text" class="form-control" @bind="highlight3Id" @bind:event="oninput" @onchange="() => OnHighlightIdChangedAsync(highlight3Id, 3)" />
                </div>
                <div class="highlight-preview">
                    <p><strong>Preview:</strong> @selectedHighlight3</p>
                    <p><strong>Status:</strong> @highlight3Status</p>
                </div>
            </div>

            <button class="btn btn-primary" @onclick="SaveHighlightsAsync">Save Highlights</button>
        </div>
    }
    else
    {
        <p>You do not have access to this page.</p>
    }
</div>

@code {
    private bool isAdmin = false;

    private string highlight1Id = string.Empty;
    private string highlight2Id = string.Empty;
    private string highlight3Id = string.Empty;

    private string selectedHighlight1 = "No product selected";
    private string selectedHighlight2 = "No product selected";
    private string selectedHighlight3 = "No product selected";

    private string highlight1Status = string.Empty;
    private string highlight2Status = string.Empty;
    private string highlight3Status = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
            {
                isAdmin = true;
            }
        }

        if (!isAdmin)
        {
            Navigation.NavigateTo("/");
        }

        await LoadCurrentHighlightsAsync();
    }

    private async Task LoadCurrentHighlightsAsync()
    {
        var highlights = (await HighlightService.GetHighlightsAsync(CancellationToken.None)).ToList();

        highlight1Id = "";
        highlight2Id = "";
        highlight3Id = "";

        selectedHighlight1 = "No product selected";
        selectedHighlight2 = "No product selected";
        selectedHighlight3 = "No product selected";

        for (int i = 0; i < highlights.Count && i < 3; i++)
        {
            var highlight = highlights[i];
            if (highlight != null)
            {
                switch (i)
                {
                    case 0:
                        highlight1Id = highlight.Id.ToString();
                        selectedHighlight1 = $"{highlight.Name} - ${highlight.Price}";
                        break;
                    case 1:
                        highlight2Id = highlight.Id.ToString();
                        selectedHighlight2 = $"{highlight.Name} - ${highlight.Price}";
                        break;
                    case 2:
                        highlight3Id = highlight.Id.ToString();
                        selectedHighlight3 = $"{highlight.Name} - ${highlight.Price}";
                        break;
                }
            }
        }

        StateHasChanged();
    }

    private async Task LoadProductDetailsAsync(int productId, int highlightNumber)
    {
        try
        {
            var product = await ProductService.GetProductByIdAsync(productId, CancellationToken.None);

            if (product != null)
            {
                switch (highlightNumber)
                {
                    case 1:
                        selectedHighlight1 = $"{product.Name} - ${product.Price}";
                        break;
                    case 2:
                        selectedHighlight2 = $"{product.Name} - ${product.Price}";
                        break;
                    case 3:
                        selectedHighlight3 = $"{product.Name} - ${product.Price}";
                        break;
                }
            }
            else
            {
                SetHighlightNotFoundMessage(highlightNumber);
            }
        }
        catch (Exception)
        {
            SetHighlightNotFoundMessage(highlightNumber);
        }

        StateHasChanged();
    }

    private void SetHighlightNotFoundMessage(int highlightNumber)
    {
        switch (highlightNumber)
        {
            case 1:
                selectedHighlight1 = "Product not found";
                break;
            case 2:
                selectedHighlight2 = "Product not found";
                break;
            case 3:
                selectedHighlight3 = "Product not found";
                break;
        }
    }

    private async Task OnHighlightIdChangedAsync(string productId, int highlightNumber)
    {
        if (int.TryParse(productId, out int id))
        {
            await LoadProductDetailsAsync(id, highlightNumber);
        }
        else
        {
            SetHighlightNotFoundMessage(highlightNumber);
            StateHasChanged();
        }
    }

    private async Task SaveHighlightsAsync()
    {
        highlight1Status = string.Empty;
        highlight2Status = string.Empty;
        highlight3Status = string.Empty;

        if (int.TryParse(highlight1Id, out int productId1))
        {
            bool success = await HighlightService.AddHighlightAsync(productId1, 1, CancellationToken.None);
            highlight1Status = success ? "Successfully saved" : "Failed to save, reverted to old product";
        }
        else
        {
            await HighlightService.RemoveHighlightAsync(1, CancellationToken.None);
            highlight1Status = "Highlight removed";
        }

        if (int.TryParse(highlight2Id, out int productId2))
        {
            bool success = await HighlightService.AddHighlightAsync(productId2, 2, CancellationToken.None);
            highlight2Status = success ? "Successfully saved" : "Failed to save, reverted to old product";
        }
        else
        {
            await HighlightService.RemoveHighlightAsync(2, CancellationToken.None);
            highlight2Status = "Highlight removed";
        }

        if (int.TryParse(highlight3Id, out int productId3))
        {
            bool success = await HighlightService.AddHighlightAsync(productId3, 3, CancellationToken.None);
            highlight3Status = success ? "Successfully saved" : "Failed to save, reverted to old product";
        }
        else
        {
            await HighlightService.RemoveHighlightAsync(3, CancellationToken.None);
            highlight3Status = "Highlight removed";
        }

        await LoadCurrentHighlightsAsync();
        StateHasChanged();
    }

}
