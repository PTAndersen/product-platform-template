@page "/admin/table-overview"
@using Microsoft.AspNetCore.Identity
@using PPTWebApp.Components.Layout
@using PPTWebApp.Data
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="table-overview-scroll-container">
    <h1>Admin Table Overview</h1>

    @if (isAdmin)
    {
        <div class="admin-table-overview-container">
            <div class="form-group">
                <label for="tableSelection">Select Table:</label>
                <select id="tableSelection" class="form-control" @onchange="OnTableSelectionChanged">
                    <option value="">-- Select a Table --</option>
                    @foreach (var table in Tables)
                    {
                        <option value="@table">@table</option>
                    }
                </select>
            </div>

            @if (!string.IsNullOrEmpty(SelectedTable))
            {
                <div class="form-group">
                    <label for="searchField">Search in @SelectedTable:</label>
                    <input id="searchField" type="text" class="form-control" placeholder="Search..." @oninput="OnSearchChanged" />
                </div>

                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="thead-light">
                            <tr>
                                @foreach (var header in TableHeaders)
                                {
                                    <th>@header</th>
                                }
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entity in PaginatedEntities)
                            {
                                <tr>
                                    @foreach (var value in entity.Values)
                                    {
                                        <td>@value</td>
                                    }
                                    <td>
                                        <button class="btn btn-primary btn-inspect" @onclick="() => InspectEntity(entity)">Inspect</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <nav aria-label="Table pagination">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)">Previous</button>
                        </li>
                        @for (var i = 1; i <= TotalPages; i++)
                        {
                            <li class="page-item @(CurrentPage == i ? "active" : "")">
                                <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                            </li>
                        }
                        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)">Next</button>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    }
    else
    {
        <p>You do not have access to this page.</p>
    }
</div>

@code {
    private bool isAdmin = false;

    private List<string> Tables = new List<string> { "Users", "Products", "Orders" };

    private string SelectedTable;
    private List<string> TableHeaders = new List<string>();
    private List<Dictionary<string, object>> Entities = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> FilteredEntities = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> PaginatedEntities = new List<Dictionary<string, object>>();

    private int PageSize = 30;  // Max number of entities per page
    private int CurrentPage = 1;
    private int TotalPages => (int)Math.Ceiling(FilteredEntities.Count / (double)PageSize);

    private string SearchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (await UserManager.IsInRoleAsync(currentUser, "Admin"))
            {
                isAdmin = true;
            }
        }

        if (!isAdmin)
        {
            Navigation.NavigateTo("/");
        }
    }

    private void OnTableSelectionChanged(ChangeEventArgs e)
    {
        SelectedTable = e.Value.ToString();
        CurrentPage = 1;
        LoadTableData();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        SearchQuery = e.Value.ToString();
        FilterEntities();
    }

    private void LoadTableData()
    {
        if (SelectedTable == "Users")
        {
            TableHeaders = new List<string> { "ID", "Name", "Email" };
            Entities = new List<Dictionary<string, object>>
            {
                new Dictionary<string, object> { { "ID", 1 }, { "Name", "John Doe" }, { "Email", "john@example.com" } },
                new Dictionary<string, object> { { "ID", 2 }, { "Name", "Jane Smith" }, { "Email", "jane@example.com" } },
            };
        }
        else if (SelectedTable == "Products")
        {
            TableHeaders = new List<string> { "ID", "Product Name", "Price" };
            Entities = new List<Dictionary<string, object>>
            {
                new Dictionary<string, object> { { "ID", 1 }, { "Product Name", "Laptop" }, { "Price", 1000 } },
                new Dictionary<string, object> { { "ID", 2 }, { "Product Name", "Mouse" }, { "Price", 25 } },
            };
        }
        else if (SelectedTable == "Orders")
        {
            TableHeaders = new List<string> { "ID", "Customer", "Total Amount" };
            Entities = new List<Dictionary<string, object>>
            {
                new Dictionary<string, object> { { "ID", 1 }, { "Customer", "John Doe" }, { "Total Amount", 1025 } },
                new Dictionary<string, object> { { "ID", 2 }, { "Customer", "Jane Smith" }, { "Total Amount", 25 } },
            };
        }

        FilteredEntities = new List<Dictionary<string, object>>(Entities);
        PaginateEntities();
    }

    private void FilterEntities()
    {
        if (string.IsNullOrEmpty(SearchQuery))
        {
            FilteredEntities = new List<Dictionary<string, object>>(Entities);
        }
        else
        {
            FilteredEntities = Entities
                .Where(e => e.Values.Any(v => v != null && v.ToString().Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }

        CurrentPage = 1;
        PaginateEntities();
    }

    private void PaginateEntities()
    {
        PaginatedEntities = FilteredEntities
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            PaginateEntities();
        }
    }

    private void InspectEntity(Dictionary<string, object> entity)
    {
        Navigation.NavigateTo($"/admin/inspect/{SelectedTable}/{entity["ID"]}");
    }
}
