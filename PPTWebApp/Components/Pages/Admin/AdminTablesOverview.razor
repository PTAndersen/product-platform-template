@page "/admin/table-overview"
@using Microsoft.AspNetCore.Identity
@using PPTWebApp.Components.Layout
@using PPTWebApp.Data
@using PPTWebApp.Data.Models
@using PPTWebApp.Data.Services
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProductService ProductService
@inject PostService PostService
@inject DiscountService DiscountService
@inject ProductCategoryService ProductCategoryService
@inject ApplicationUserService ApplicationUserService
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="table-overview-scroll-container">
    <h1>Admin Table Overview</h1>

    @if (isAdmin)
    {
        <div class="admin-table-overview-container">
            <div class="form-group">
                <label for="tableSelection">Select Table:</label>
                <select id="tableSelection" class="form-control" @onchange="OnTableSelectionChanged">
                    <option value="">-- Select a Table --</option>
                    @foreach (var table in Tables)
                    {
                        <option value="@table">@table</option>
                    }
                </select>
            </div>

            @if (!string.IsNullOrEmpty(SelectedTable))
            {
                <div class="form-group">
                    <label for="searchField">Search in @SelectedTable:</label>
                    <input id="searchField" type="text" class="form-control" placeholder="Search..." @oninput="OnSearchChanged" />
                </div>

                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="thead-light">
                            <tr>
                                @foreach (var header in TableHeaders)
                                {
                                    <th>@header</th>
                                }
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entity in PaginatedEntities)
                            {
                                <tr>
                                    @foreach (var value in entity.Values)
                                    {
                                        <td>@value</td>
                                    }
                                    <td>
                                        <button class="btn btn-primary btn-inspect" @onclick="() => InspectEntity(entity)">Inspect</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="pagination">
                    <button class="pagination-btn" @onclick="LoadPreviousPage" disabled="@((PageIndex == 0))">←</button>
                    <span class="pagination-text">Page</span>
                    <input type="number" value="@(PageIndex + 1)" min="1" max="@TotalPages" class="page-input" @onchange="OnPageInputChange" />
                    <span class="pagination-text">of @TotalPages</span>
                    <button class="pagination-btn" @onclick="LoadNextPage" disabled="@((PageIndex == TotalPages - 1))">→</button>
                </div>
            }
        </div>
    }
    else
    {
        <p>You do not have access to this page.</p>
    }
</div>

@code {
    private bool isAdmin = false;
    private List<string> Tables = new List<string> { "Posts", "Products", "Users", "Product Categories", "Discounts" };
    private string SelectedTable;
    private List<string> TableHeaders = new List<string>();
    private List<Dictionary<string, object>> PaginatedEntities = new List<Dictionary<string, object>>();
    private int PageSize = 20; // Items per page
    private int PageIndex = 1;
    private int TotalItems;
    private int TotalPages => (int)Math.Ceiling(TotalItems / (double)PageSize);
    private string SearchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (await UserManager.IsInRoleAsync(currentUser, "Admin"))
            {
                isAdmin = true;
            }
        }

        if (!isAdmin)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async void OnTableSelectionChanged(ChangeEventArgs e)
    {
        SelectedTable = e.Value.ToString();
        PageIndex = 0;
        await LoadTableDataAsync();
    }

    private async Task LoadTableDataAsync()
    {
        switch (SelectedTable)
        {
            case "Posts":
                TableHeaders = new List<string> { "ID", "Title", "Date Posted" };
                SetTotalItems();
                var posts = PostService.GetPostsInRange(SearchQuery, PageIndex * PageSize, PageSize);
                PaginatedEntities = posts.Select(post => new Dictionary<string, object>
                {
                    { "ID", post.Id },
                    { "Title", post.Title },
                    { "Date Posted", post.DatePosted.ToString("yyyy-MM-dd") }
                }).ToList();
                break;

            case "Products":
                TableHeaders = new List<string> { "ID", "Product Name", "Price", "Discount Active", "Inventory Quantity" };
                SetTotalItems();
                var products = ProductService.SearchProducts(null, SearchQuery, 0, 1000000000, PageIndex * PageSize, PageSize);
                PaginatedEntities = products.Select(product => new Dictionary<string, object>
                {
                    { "ID", product.Id },
                    { "Product Name", product.Name },
                    { "Price", product.Price },
                    { "Discount Active", product.Discount != null && product.Discount.IsActive ? "Yes" : "No" },
                    { "Inventory Quantity", product.ProductInventory == null ? "N/A" : product.ProductInventory.Quantity }
                }).ToList();
                break;

            case "Users":
                TableHeaders = new List<string> { "ID", "Username", "Email" };
                TotalItems = await ApplicationUserService.GetTotalUserCountAsync(SearchQuery, null, CancellationToken.None);
                var users = await ApplicationUserService.SearchUsersAsync(SearchQuery, null, PageIndex * PageSize, PageSize, CancellationToken.None);
                PaginatedEntities = users.Select(user => new Dictionary<string, object>
                {
                    { "ID", user.Id },
                    { "Username", user.UserName },
                    { "Email", user.Email == null ? "N/A" : user.Email }
                }).ToList();
                break;

            case "Product Categories":
                TableHeaders = new List<string> { "ID", "Category Name", "Description" };
                var categories = ProductCategoryService.GetAllCategories();
                PaginatedEntities = categories.Select(category => new Dictionary<string, object>
                {
                    { "ID", category.Id },
                    { "Category Name", category.Name },
                    { "Description", category.Description }
                }).ToList();
                break;

            case "Discounts":
                TableHeaders = new List<string> { "ID", "Name", "Description", "Discount Percent", "Active" };
                SetTotalItems();
                var discounts = DiscountService.GetAllDiscountsInRange(SearchQuery, PageIndex * PageSize, PageSize);
                PaginatedEntities = discounts.Select(discount => new Dictionary<string, object>
                {
                    { "ID", discount.Id },
                    { "Name", discount.Name },
                    { "Description", discount.Description },
                    { "Discount Percent", discount.DiscountPercent },
                    { "Active", discount.IsActive ? "Yes" : "No" }
                }).ToList();
                break;

            default:
                PaginatedEntities.Clear();
                TableHeaders.Clear();
                break;
        }

        StateHasChanged();
    }

    private void SetTotalItems()
{
    if (SelectedTable == "Posts")
    {
        TotalItems = PostService.GetTotalPostCount(SearchQuery);
    }
    else if (SelectedTable == "Products")
    {
        TotalItems = ProductService.GetTotalProductCount(null, SearchQuery, 0, 1000000000);
    }
    else if (SelectedTable == "Discounts")
    {
        TotalItems = DiscountService.GetDiscountCount(SearchQuery);
    }
}



    private void OnSearchChanged(ChangeEventArgs e)
    {
        SearchQuery = e.Value.ToString();
        PageIndex = 0;
        SetTotalItems();
        _ = LoadTableDataAsync();
    }

    private void LoadNextPage()
    {
        if (PageIndex < TotalPages - 1)
        {
            PageIndex++;
            _ = LoadTableDataAsync();
        }
    }

    private void LoadPreviousPage()
    {
        if (PageIndex > 0)
        {
            PageIndex--;
            _ = LoadTableDataAsync();
        }
    }

    private void OnPageInputChange(ChangeEventArgs e)
    {
        int inputPage = Math.Max(1, Math.Min(TotalPages, int.Parse(e.Value.ToString())));
        PageIndex = inputPage - 1;
    }

    private void InspectEntity(Dictionary<string, object> entity)
    {
        Navigation.NavigateTo($"/admin/inspect/{SelectedTable}/{entity["ID"]}");
    }
}
