@page "/posts/overview"
@using PPTWebApp.Data.Models
@using PPTWebApp.Data.Services
@inject PostService PostService

<div class="overview-posts-container">
    <h3 class="text-center">All Posts</h3>

    <div class="query-bar-container">
        <button class="btn btn-dark d-lg-none mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#queryBar" aria-expanded="false" aria-controls="queryBar">
            Filters
        </button>
        <div id="queryBar" class="query-bar collapse d-lg-block">
            <div class="row gx-3 justify-content-center">
                <div class="col-md-3 mb-2">
                    <input type="text" placeholder="Search posts..." class="form-control"
                           @bind="SearchInput" @oninput="OnSearchInputChangeAsync" />
                </div>
            </div>
        </div>
    </div>


    <div class="row gx-3 gy-3 align-items-stretch">
        @foreach (var post in Posts)
        {
            <div class="col-12 col-md-6 col-lg-3">
                <div class="post-box">
                    <PostPreview Post="post" />
                </div>
            </div>
        }
    </div>


    <div class="pagination">
        <button class="pagination-btn" @onclick="LoadPreviousPageAsync" disabled="@((PageIndex == 0))">←</button>
        <span class="pagination-text">Page</span>
        <input type="number" value="@(PageIndex + 1)" min="1" max="@TotalPages" class="page-input" @onchange="OnPageInputChangeAsync" />
        <span class="pagination-text">of @TotalPages</span>
        <button class="pagination-btn" @onclick="LoadNextPageAsync" disabled="@((PageIndex == TotalPages - 1))">→</button>
    </div>

</div>

@code {
    private IEnumerable<Post> Posts { get; set; } = Enumerable.Empty<Post>();
    private string SearchInput = "";
    private int MaxPostsToDisplay = 8;
    private int PageIndex = 0;
    private int TotalPosts = 0;
    private int TotalPages => (int)Math.Ceiling((double)TotalPosts / MaxPostsToDisplay);

    protected override async Task OnInitializedAsync()
    {
        await LoadPostsAsync();
    }

    private async Task LoadPostsAsync()
    {
        TotalPosts = await PostService.GetTotalPostCountAsync(SearchInput, CancellationToken.None);
        Posts = await PostService.GetPostsInRangeAsync(SearchInput, PageIndex * MaxPostsToDisplay, MaxPostsToDisplay, CancellationToken.None);
    }

    private async Task LoadNextPageAsync()
    {
        if (PageIndex < TotalPages - 1)
        {
            PageIndex++;
            await LoadPostsAsync();
        }
    }

    private async Task LoadPreviousPageAsync()
    {
        if (PageIndex > 0)
        {
            PageIndex--;
            await LoadPostsAsync();
        }
    }

    private async Task OnPageInputChangeAsync(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out var inputPage))
        {
            inputPage = Math.Max(1, Math.Min(TotalPages, inputPage));
        }
        else
        {
            inputPage = 1;
        }

        PageIndex = inputPage - 1;
        await LoadPostsAsync();
    }


    private async Task OnSearchInputChangeAsync(ChangeEventArgs e)
    {
        SearchInput = e.Value?.ToString() ?? string.Empty;
        PageIndex = 0;
        await LoadPostsAsync();
    }
}
