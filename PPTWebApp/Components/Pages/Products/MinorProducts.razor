@page "/products"
@using PPTWebApp.Data.Models
@using PPTWebApp.Data.Services
@inject ProductService ProductService
@inject ProductCategoryService ProductCategoryService
@rendermode InteractiveServer

@code {
    private string searchInput = "";
    private List<Product> Products = new List<Product>();
    private List<ProductCategory> ProductCategories = new List<ProductCategory>();
    private List<string> SortByOptions = new List<string>
    {
        "Best Sellers",
        "Cheapest First",
        "Most Expensive First",
    };
    private string SortBy = "Best Sellers";
    private ProductCategory? SelectedCategory = null;
    private decimal MinPrice = 0;
    private decimal MaxPrice = 1000;
    private int MaxProductsToDisplay = 8;
    private int PageIndex = 0;
    private int TotalProducts = 0;
    private int TotalPages => (int)Math.Ceiling((double)TotalProducts / MaxProductsToDisplay);

    protected override async Task OnInitializedAsync()
    {
        ProductCategories = (await ProductCategoryService.GetAllCategoriesAsync(CancellationToken.None)).ToList();

        TotalProducts = await ProductService.GetTotalProductCountAsync(SelectedCategory, searchInput, MinPrice, MaxPrice, CancellationToken.None);

        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        TotalProducts = await ProductService.GetTotalProductCountAsync(SelectedCategory, searchInput, MinPrice, MaxPrice, CancellationToken.None);
        switch (SortBy)
        {
            case "Cheapest First":
                Products = (await ProductService.GetCheapestProductsAsync(SelectedCategory, MinPrice, MaxPrice, PageIndex * MaxProductsToDisplay, MaxProductsToDisplay, CancellationToken.None)).ToList();
                break;
            case "Most Expensive First":
                Products = (await ProductService.GetMostExpensiveProductsAsync(SelectedCategory, MinPrice, MaxPrice, PageIndex * MaxProductsToDisplay, MaxProductsToDisplay, CancellationToken.None)).ToList();
                break;
            case "Search Results":
                Products = (await ProductService.SearchProductsAsync(SelectedCategory, searchInput, MinPrice, MaxPrice, PageIndex * MaxProductsToDisplay, MaxProductsToDisplay, CancellationToken.None)).ToList();
                break;
            default:
                Products = (await ProductService.GetBestsellersAsync(SelectedCategory, MinPrice, MaxPrice, PageIndex * MaxProductsToDisplay, MaxProductsToDisplay, CancellationToken.None)).ToList();
                break;
        }
    }

    private async Task LoadNextPageAsync()
    {
        if (PageIndex < TotalPages - 1)
        {
            PageIndex++;
            await LoadProductsAsync();
        }
    }

    private async Task LoadPreviousPage()
    {
        if (PageIndex > 0)
        {
            PageIndex--;
            await LoadProductsAsync();
        }
    }

    private async Task OnPageInputChangeAsync(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out var inputPage))
        {
            inputPage = Math.Max(1, Math.Min(TotalPages, inputPage));
        }
        else
        {
            inputPage = 1;
        }

        PageIndex = inputPage - 1;
        await LoadProductsAsync();
    }

    private async Task OnCategoryChangeAsync(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out var selectedCategoryId))
        {
            SelectedCategory = ProductCategories.FirstOrDefault(c => c.Id == selectedCategoryId);
        }
        else
        {
            SelectedCategory = null;
        }

        PageIndex = 0;
        searchInput = "";
        await LoadProductsAsync();
    }

    private async Task OnMinPriceChangeAsync(ChangeEventArgs e)
    {
        MinPrice = e.Value != null && decimal.TryParse(e.Value.ToString(), out var result) ? result : 0;
        PageIndex = 0;
        await LoadProductsAsync();
    }

    private async Task OnMaxPriceChangeAsync(ChangeEventArgs e)
    {
        MaxPrice = e.Value != null && decimal.TryParse(e.Value.ToString(), out var result) ? result : 1000;
        PageIndex = 0;
        await LoadProductsAsync();
    }

    private async Task OnSortByChangeAsync(ChangeEventArgs e)
    {
        SortBy = e.Value?.ToString() ?? string.Empty;
        PageIndex = 0;
        await LoadProductsAsync();
    }

    private async Task OnSearchInputChangeAsync(ChangeEventArgs e)
    {
        searchInput = e.Value?.ToString() ?? string.Empty;
        SortBy = "Search Results";
        PageIndex = 0;
        await LoadProductsAsync();
    }
}

<div class="product-grid-container">
    <div class="query-bar-container">
        <button class="btn btn-dark d-lg-none mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#queryBar" aria-expanded="false" aria-controls="queryBar">
            Filters
        </button>

        <div id="queryBar" class="query-bar collapse d-lg-block">
            <div class="row gx-3 justify-content-center">
                <div class="col-md-2 mb-2">
                    <input type="text" placeholder="Search products..." class="form-control"
                           @bind="searchInput" @oninput="OnSearchInputChangeAsync" />
                </div>

                <div class="col-md-2 mb-2">
                    <select class="form-select" @onchange="OnSortByChangeAsync">
                        @foreach (var option in SortByOptions)
                        {
                            <option value="@option" selected="@(option == SortBy)">@option</option>
                        }
                    </select>
                </div>

                <div class="col-md-3 mb-2 d-flex align-items-center">
                    <label for="priceRange" class="me-2">Price Range:</label>
                    <input type="number" id="minPriceInput" min="0" max="1000000" value="@MinPrice" class="form-control w-25" @onchange="OnMinPriceChangeAsync" />
                    <span class="mx-2">to</span>
                    <input type="number" id="maxPriceInput" min="0" max="1000000" value="@MaxPrice" class="form-control w-25" @onchange="OnMaxPriceChangeAsync" />
                </div>

                <div class="col-md-2 mb-2">
                    <select class="form-select" @onchange="OnCategoryChangeAsync">
                        <option value="0">All Categories</option>
                        @foreach (var category in ProductCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>

    <div class="row gx-3 gy-3 align-items-stretch">
        @foreach (var product in Products)
        {
            <div class="col-12 col-md-6 col-lg-3">
                <div class="product-box">
                    <ProductPreview Product="@product" />
                </div>
            </div>
        }
    </div>

    <div class="pagination">
        <button class="pagination-btn" @onclick="LoadPreviousPage" disabled="@((PageIndex == 0))">←</button>
        <span class="pagination-text">Page</span>
        <input type="number" value="@(PageIndex + 1)" min="1" max="@TotalPages" class="page-input" @onchange="OnPageInputChangeAsync" />
        <span class="pagination-text">of @TotalPages</span>
        <button class="pagination-btn" @onclick="LoadNextPageAsync" disabled="@((PageIndex == TotalPages - 1))">→</button>
    </div>
</div>
